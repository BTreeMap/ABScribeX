name: CI

on:
  push:
    branches: [main]
  schedule:
    - cron: '0 16 * * *'

jobs:
  setup-env:
    # Prepare common variables: date, timestamp, repo, and short SHA
    runs-on: ubuntu-24.04
    if: github.event_name == 'schedule' || github.event_name == 'push'
    outputs:
      date: ${{ steps.vars.outputs.date }}
      date_time: ${{ steps.vars.outputs.date_time }}
      source_date_epoch: ${{ steps.vars.outputs.source_date_epoch }}
      repo: ${{ steps.vars.outputs.repo }}
      short_sha: ${{ steps.vars.outputs.short_sha }}
    steps:
      - name: Generate common variables
        id: vars
        run: |
          now=$(date +%s)
          date=$(date -u -d "@$now" '+%Y-%m-%d')
          date_time=$(date -u -d "@$now" '+%Y-%m-%d.%H-%M-%S')
          year_month=$(date -u -d "@$now" '+%Y-%m')
          source_date_epoch=$(date -u -d "${year_month}-01 00:00:00" '+%s')
          echo "date=$date" >> $GITHUB_OUTPUT
          echo "date_time=$date_time" >> $GITHUB_OUTPUT
          echo "source_date_epoch=$source_date_epoch" >> $GITHUB_OUTPUT
          echo "repo=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT
          echo "short_sha=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT

  build-extension:
    needs: setup-env
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          check-latest: true

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

      - name: Build Chrome extension
        env:
          SOURCE_DATE_EPOCH: ${{ needs.setup-env.outputs.source_date_epoch }}
        run: |
          mkdir -p build/chrome
          npm run build
          npm run zip
          # Find and copy the chrome zip file
          find .output -name "*.zip" -type f | grep -E "chrome.*\.zip$" | head -1 | xargs -I {} cp {} build/chrome/abscribex-chrome.zip

      - name: Build Firefox extension
        env:
          SOURCE_DATE_EPOCH: ${{ needs.setup-env.outputs.source_date_epoch }}
        run: |
          mkdir -p build/firefox
          npm run build:firefox
          npm run zip:firefox
          # Find and copy the firefox zip file
          find .output -name "*.zip" -type f | grep -E "firefox.*\.zip$" | head -1 | xargs -I {} cp {} build/firefox/abscribex-firefox.zip

      - name: Upload Chrome extension
        uses: actions/upload-artifact@v4
        with:
          name: chrome-extension
          path: build/chrome/*.zip

      - name: Upload Firefox extension
        uses: actions/upload-artifact@v4
        with:
          name: firefox-extension
          path: build/firefox/*.zip

  release:
    needs: [setup-env, build-extension]
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - name: Download Chrome extension
        uses: actions/download-artifact@v4
        with:
          name: chrome-extension
          path: release/artifacts

      - name: Download Firefox extension
        uses: actions/download-artifact@v4
        with:
          name: firefox-extension
          path: release/artifacts

      - name: Set release version
        id: version
        run: |
          ver="${{ needs.setup-env.outputs.date_time }}.${{ needs.setup-env.outputs.short_sha }}"
          echo "version=$ver" >> $GITHUB_OUTPUT

      - name: Create or update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          target_commitish: ${{ github.sha }}
          name: "ABScribeX v${{ steps.version.outputs.version }}"
          prerelease: ${{ !contains(github.event.head_commit.message, 'run-ci') }}
          body: |
            **ABScribeX Browser Extension Release**
            
            Built from commit: ${{ github.sha }}
            Build date: ${{ needs.setup-env.outputs.date_time }}
            
            ### Downloads
            - **Chrome/Chromium**: `abscribex-chrome.zip`
            - **Firefox**: `abscribex-firefox.zip`
            
            ### Installation
            1. Download the appropriate ZIP file for your browser
            2. Extract the ZIP file
            3. Load the extracted folder as an unpacked extension in your browser's developer mode
          files: |
            release/artifacts/*
